// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	field Array string;
	field int max_length;
	field int string_length;
	
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		if ( maxLength = 0 ) {
			let maxLength = 1;
		}
		let string = Array.new(maxLength);
		let max_length = maxLength;
		let string_length = 0;
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		do Array.dispose(string);
		return;
    }

    /** Returns the current length of this String. */
    method int length() {
        return string_length;
    }
 
    /** Returns the character at location j. */
    method char charAt(int j) {
        return string[j];
    }
 
    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
        let string[j] = c;
        return;
    }
 
    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
        if( string_length < max_length ) {
            let string[string_length] = c;
            let string_length = string_length + 1;
        }
        return this;
    }
 
    /** Erases the last character from this String. */
    method void eraseLastChar() {
        if( string_length > 0 ) {
            let string_length = string_length - 1;
        }
        return;
    }


    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int int_val;
        var int i;
        var int neg;
        
        let int_val = 0;
        
        if( (string_length > 0) & (string[0] = 45) ) {      // '-'
            let neg = -1;
            let i = 1;
        }
		else {
            let neg = 1;
            let i = 0;
        }
		while( (i < string_length) & (~(string[i] < 48) & ~(string[i] > 57)) ) {
            let int_val = (int_val * 10) + string[i] - 48;
            let i = i + 1;
        }
		return neg*int_val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		let string_length = 0;            
        if( val < 0 ) {
            let val = -val;
            do appendChar(45);
        }
        
        do do_set_int(val); 
        return;
    }

	method void do_set_int(int val) {
        var int q;
        var int mod;
        var char c;
        
        let q = val / 10;
        let mod = val - (q*10);
        let c = (mod + 48);
        
        if( val < 10 ) {
            do appendChar(c);
        }
        else {
            do do_set_int(q);
            do appendChar(c);
        }
        return;
    }


    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
